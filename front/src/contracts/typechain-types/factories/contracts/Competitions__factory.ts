/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  Competitions,
  CompetitionsInterface,
} from "../../contracts/Competitions";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract RootstockGovernor",
        name: "_governor",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    stateMutability: "nonpayable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "awards",
    outputs: [
      {
        internalType: "contract Awards",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "competitions",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "endCompetition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "competitionName",
        type: "string",
      },
    ],
    name: "getProposalId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "governor",
    outputs: [
      {
        internalType: "contract RootstockGovernor",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "nameHash",
        type: "bytes32",
      },
    ],
    name: "onCompetitionEnd",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract Awards",
        name: "_awards",
        type: "address",
      },
    ],
    name: "setAwards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "teams",
        type: "address[]",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "startCompetition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405162001d7d38038062001d7d8339810160408190526100319161009b565b61003a3361004b565b6001600160a01b03166080526100cb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100ad57600080fd5b81516001600160a01b03811681146100c457600080fd5b9392505050565b608051611c736200010a600039600081816101740152818161030f015281816107030152818161081401528181610a230152610cd40152611c736000f3fe6080604052600436106100a05760003560e01c8063715018a611610064578063715018a6146102515780638da5cb5b14610266578063ada4365914610284578063c494d818146102a4578063e12bef6d146102c4578063f2fde38b146102e457610101565b80630c340a241461016257806318e3d901146101b3578063252d34b6146101d55780632d39ff951461020357806361cf10ac1461023157610101565b366101015760405162461bcd60e51b815260206004820152602660248201527f436f6d7065746974696f6e733a204e6f206e65656420746f2073656e64206d65604482015265206d6f6e657960d01b60648201526084015b60405180910390fd5b34801561010d57600080fd5b5060405162461bcd60e51b815260206004820152602360248201527f436f6d7065746974696f6e733a20556e6b6e6f776e2066756e6374696f6e2063604482015262185b1b60ea1b60648201526084016100f8565b34801561016e57600080fd5b506101967f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101bf57600080fd5b506101d36101ce3660046116b9565b610304565b005b3480156101e157600080fd5b506101f56101f03660046116b9565b6105b3565b6040516101aa92919061171f565b34801561020f57600080fd5b5061022361021e36600461178a565b61065b565b6040519081526020016101aa565b34801561023d57600080fd5b506101d361024c36600461178a565b6106a1565b34801561025d57600080fd5b506101d36108c0565b34801561027257600080fd5b506000546001600160a01b0316610196565b34801561029057600080fd5b50600254610196906001600160a01b031681565b3480156102b057600080fd5b506101d36102bf3660046117cc565b6108d4565b3480156102d057600080fd5b506101d36102df36600461187b565b610ada565b3480156102f057600080fd5b506101d36102ff36600461187b565b610b04565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103955760405162461bcd60e51b815260206004820152603060248201527f436f6d7065746974696f6e733a2043616e2062652063616c6c6564206f6e6c7960448201526f10313c903a34329023b7bb32b93737b960811b60648201526084016100f8565b60008181526001602090815260408083206002810154815483518186028101860190945280845291949361040a939192869183018282801561040057602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103e2575b5050505050610b7a565b905060005b81518160ff1610156105ac5760005b828260ff16815181106104335761043361189f565b6020026020010151518160ff16101561059957828260ff168151811061045b5761045b61189f565b60200260200101518160ff16815181106104775761047761189f565b60200260200101516000015160001415610492575050505050565b60025483516001600160a01b0390911690630e54ef10906001870190869060ff87169081106104c3576104c361189f565b60200260200101518460ff16815181106104df576104df61189f565b602002602001015160000151868660ff16815181106105005761050061189f565b60200260200101518560ff168151811061051c5761051c61189f565b60200260200101516020015186600161053591906118cb565b6040518563ffffffff1660e01b8152600401610554949392919061192b565b600060405180830381600087803b15801561056e57600080fd5b505af1158015610582573d6000803e3d6000fd5b505050508080610591906119f4565b91505061041e565b50806105a4816119f4565b91505061040f565b5050505b50565b600160208190526000918252604090912090810180546105d2906118f0565b80601f01602080910402602001604051908101604052809291908181526020018280546105fe906118f0565b801561064b5780601f106106205761010080835404028352916020019161064b565b820191906000526020600020905b81548152906001019060200180831161062e57829003601f168201915b5050505050908060020154905082565b6000808383604051602001610671929190611a14565b60408051808303601f19018152918152815160209283012060009081526001909252902060020154949350505050565b6106a9611314565b600082826040516020016106be929190611a14565b60408051601f19818403018152918152815160209283012060008181526001909352912090915060046002820154604051631f27a4f360e11b815260048101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633e4f49e69060240160206040518083038186803b15801561074d57600080fd5b505afa158015610761573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107859190611a3a565b600781111561079657610796611a24565b146107fe5760405162461bcd60e51b815260206004820152603260248201527f436f6d7065746974696f6e733a2050726f706f73616c206973206e6f7420726560448201527118591e481d1bc8189948195e1958dd5d195960721b60648201526084016100f8565b600080600061080c8561136e565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632656227d848484896040518563ffffffff1660e01b81526004016108649493929190611b24565b602060405180830381600087803b15801561087e57600080fd5b505af1158015610892573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b69190611b6f565b5050505050505050565b6108c8611314565b6108d26000611488565b565b6108dc611314565b6001831180156108ed575060fa8311155b6109505760405162461bcd60e51b815260206004820152602e60248201527f436f6d7065746974696f6e733a204d696e20322c206d6178203235302074656160448201526d1b5cc8185c9948185b1b1bddd95960921b60648201526084016100f8565b60008282604051602001610965929190611a14565b60408051601f198184030181529181528151602092830120600081815260019093529120805491925090156109f25760405162461bcd60e51b815260206004820152602d60248201527f436f6d7065746974696f6e733a20436f6d7065746974696f6e2068617320616c60448201526c1c9958591e481cdd185c9d1959609a1b60648201526084016100f8565b6109fd8187876115cd565b50610a0c600182018585611630565b506000806000610a1b8561136e565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c548482c8484848b8b6040518663ffffffff1660e01b8152600401610a75959493929190611b88565b602060405180830381600087803b158015610a8f57600080fd5b505af1158015610aa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac79190611b6f565b8460020181905550505050505050505050565b610ae2611314565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b610b0c611314565b6001600160a01b038116610b715760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100f8565b6105b081611488565b60408051600380825260808201909252606091816020015b6060815260200190600190039081610b92575050604080516001808252818301909252919250602082015b6040805180820190915260008082526020820152815260200190600190039081610bbd5790505081600081518110610bf757610bf761189f565b602090810291909101015260408051600180825281830190925290816020015b6040805180820190915260008082526020820152815260200190600190039081610c175790505081600181518110610c5157610c5161189f565b602090810291909101015260408051600180825281830190925290816020015b6040805180820190915260008082526020820152815260200190600190039081610c715790505081600281518110610cab57610cab61189f565b602002602001018190525060005b82518160ff16101561130d57600060405180604001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663048fd2ef88866001610d0f91906118cb565b6040516001600160e01b031960e085901b168152600481019290925260ff16602482015260440160206040518083038186803b158015610d4e57600080fd5b505afa158015610d62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d869190611b6f565b8152602001858460ff1681518110610da057610da061189f565b60200260200101516001600160a01b03168152509050806000015160001415610dc957506112fb565b82600081518110610ddc57610ddc61189f565b6020026020010151600184600081518110610df957610df961189f565b602002602001015151610e0c9190611c0e565b81518110610e1c57610e1c61189f565b60200260200101516000015181600001511115610f3d5782600181518110610e4657610e4661189f565b602002602001015183600281518110610e6157610e6161189f565b602002602001018190525082600081518110610e7f57610e7f61189f565b602002602001015183600181518110610e9a57610e9a61189f565b602090810291909101015260408051600180825281830190925290816020015b6040805180820190915260008082526020820152815260200190600190039081610eba5790505083600081518110610ef457610ef461189f565b60200260200101819052508083600081518110610f1357610f1361189f565b6020026020010151600081518110610f2d57610f2d61189f565b60200260200101819052506112f9565b82600081518110610f5057610f5061189f565b6020026020010151600184600081518110610f6d57610f6d61189f565b602002602001015151610f809190611c0e565b81518110610f9057610f9061189f565b60200260200101516000015181600001511415610fde57610fcb83600081518110610fbd57610fbd61189f565b6020026020010151826114d8565b83600081518110610f2d57610f2d61189f565b82600181518110610ff157610ff161189f565b602002602001015160018460018151811061100e5761100e61189f565b6020026020010151516110219190611c0e565b815181106110315761103161189f565b602002602001015160000151816000015111156110ef578260018151811061105b5761105b61189f565b6020026020010151836002815181106110765761107661189f565b602090810291909101015260408051600180825281830190925290816020015b604080518082019091526000808252602082015281526020019060019003908161109657905050836001815181106110d0576110d061189f565b60200260200101819052508083600181518110610f1357610f1361189f565b826001815181106111025761110261189f565b602002602001015160018460018151811061111f5761111f61189f565b6020026020010151516111329190611c0e565b815181106111425761114261189f565b602002602001015160000151816000015114156111825761116f83600181518110610fbd57610fbd61189f565b83600181518110610f2d57610f2d61189f565b826002815181106111955761119561189f565b60200260200101516001846002815181106111b2576111b261189f565b6020026020010151516111c59190611c0e565b815181106111d5576111d561189f565b6020026020010151600001518160000151111561125a5760408051600180825281830190925290816020015b6040805180820190915260008082526020820152815260200190600190039081611201579050508360028151811061123b5761123b61189f565b60200260200101819052508083600281518110610f1357610f1361189f565b8260028151811061126d5761126d61189f565b602002602001015160018460028151811061128a5761128a61189f565b60200260200101515161129d9190611c0e565b815181106112ad576112ad61189f565b602002602001015160000151816000015114156112f9576112da83600281518110610fbd57610fbd61189f565b836002815181106112ed576112ed61189f565b60200260200101819052505b505b80611305816119f4565b915050610cb9565b5092915050565b6000546001600160a01b031633146108d25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016100f8565b604080516001808252818301909252606091829182916020808301908036833701905050925030836000815181106113a8576113a861189f565b6001600160a01b03929092166020928302919091018201526040805160018082528183019092529182810190803683370190505091506000826000815181106113f3576113f361189f565b602090810291909101015260408051600180825281830190925290816020015b60608152602001906001900390816114135750506040805160248082018890528251808303909101815260449091019091526020810180516001600160e01b03166318e3d90160e01b17905281519192509082906000906114765761147661189f565b60200260200101819052509193909250565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060825160016114e89190611c25565b67ffffffffffffffff81111561150057611500611bf8565b60405190808252806020026020018201604052801561154557816020015b604080518082019091526000808252602082015281526020019060019003908161151e5790505b50905060005b83518160ff1610156115a757838160ff168151811061156c5761156c61189f565b6020026020010151828260ff16815181106115895761158961189f565b6020026020010181905250808061159f906119f4565b91505061154b565b5081818451815181106115bc576115bc61189f565b602002602001018190525092915050565b828054828255906000526020600020908101928215611620579160200282015b828111156116205781546001600160a01b0319166001600160a01b038435161782556020909201916001909101906115ed565b5061162c9291506116a4565b5090565b82805461163c906118f0565b90600052602060002090601f01602090048101928261165e5760008555611620565b82601f106116775782800160ff19823516178555611620565b82800160010185558215611620579182015b82811115611620578235825591602001919060010190611689565b5b8082111561162c57600081556001016116a5565b6000602082840312156116cb57600080fd5b5035919050565b6000815180845260005b818110156116f8576020818501810151868301820152016116dc565b8181111561170a576000602083870101525b50601f01601f19169290920160200192915050565b60408152600061173260408301856116d2565b90508260208301529392505050565b60008083601f84011261175357600080fd5b50813567ffffffffffffffff81111561176b57600080fd5b60208301915083602082850101111561178357600080fd5b9250929050565b6000806020838503121561179d57600080fd5b823567ffffffffffffffff8111156117b457600080fd5b6117c085828601611741565b90969095509350505050565b600080600080604085870312156117e257600080fd5b843567ffffffffffffffff808211156117fa57600080fd5b818701915087601f83011261180e57600080fd5b81358181111561181d57600080fd5b8860208260051b850101111561183257600080fd5b60209283019650945090860135908082111561184d57600080fd5b5061185a87828801611741565b95989497509550505050565b6001600160a01b03811681146105b057600080fd5b60006020828403121561188d57600080fd5b813561189881611866565b9392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff84168060ff038211156118e8576118e86118b5565b019392505050565b600181811c9082168061190457607f821691505b6020821081141561192557634e487b7160e01b600052602260045260246000fd5b50919050565b60808152600080865481600182811c91508083168061194b57607f831692505b602080841082141561196b57634e487b7160e01b86526022600452602486fd5b6080880184905260a0880182801561198a576001811461199b576119c6565b60ff198716825282820197506119c6565b60008e81526020902060005b878110156119c0578154848201529086019084016119a7565b83019850505b505087018a90525050506001600160a01b038616604085015250905060ff8316606083015295945050505050565b600060ff821660ff811415611a0b57611a0b6118b5565b60010192915050565b8183823760009101908152919050565b634e487b7160e01b600052602160045260246000fd5b600060208284031215611a4c57600080fd5b81516008811061189857600080fd5b600081518084526020808501945080840160005b83811015611a945781516001600160a01b031687529582019590820190600101611a6f565b509495945050505050565b600081518084526020808501945080840160005b83811015611a9457815187529582019590820190600101611ab3565b600081518084526020808501808196508360051b8101915082860160005b85811015611b17578284038952611b058483516116d2565b98850198935090840190600101611aed565b5091979650505050505050565b608081526000611b376080830187611a5b565b8281036020840152611b498187611a9f565b90508281036040840152611b5d8186611acf565b91505082606083015295945050505050565b600060208284031215611b8157600080fd5b5051919050565b608081526000611b9b6080830188611a5b565b8281036020840152611bad8188611a9f565b90508281036040840152611bc18187611acf565b90508281036060840152838152838560208301376000602085830101526020601f19601f8601168201019150509695505050505050565b634e487b7160e01b600052604160045260246000fd5b600082821015611c2057611c206118b5565b500390565b60008219821115611c3857611c386118b5565b50019056fea264697066735822122028283207ffed675ea205020ab9fc300afb636a4c4c0984da36f3d414b001626064736f6c63430008090033";

type CompetitionsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CompetitionsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Competitions__factory extends ContractFactory {
  constructor(...args: CompetitionsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _governor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Competitions> {
    return super.deploy(_governor, overrides || {}) as Promise<Competitions>;
  }
  override getDeployTransaction(
    _governor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_governor, overrides || {});
  }
  override attach(address: string): Competitions {
    return super.attach(address) as Competitions;
  }
  override connect(signer: Signer): Competitions__factory {
    return super.connect(signer) as Competitions__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CompetitionsInterface {
    return new utils.Interface(_abi) as CompetitionsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Competitions {
    return new Contract(address, _abi, signerOrProvider) as Competitions;
  }
}
